import /init.recovery.${ro.hardware}.rc

on early-init
    # Apply strict SELinux checking of PROT_EXEC on mmap/mprotect calls.
    write /sys/fs/selinux/checkreqprot 0

    # Set the security context for the init process.
    # This should occur before anything else (e.g. ueventd) is started.
    setcon u:r:init:s0

    start ueventd
    start healthd
    #/* < DTS2015071501002 dongsheng 20150721 begin */
    start vm_bms
    #/* DTS2015071501002 dongsheng 20150721 end >*/

on init
#export PATH /sbin:/system/bin
    export PATH /sbin:/system/sbin:/system/bin:/system/xbin
    export LD_LIBRARY_PATH /system/vendor/lib64:/system/lib64:/system/vendor/lib:/system/lib
    export ANDROID_ROOT /system
    export ANDROID_DATA /data
    export EXTERNAL_STORAGE /sdcard

    symlink /system/etc /etc

    mkdir /sdcard
    mkdir /system
    mkdir /data
    mkdir /cache
    mkdir /sideload
    mount tmpfs tmpfs /tmp
    mkdir /log
    mkdir /cust
    mkdir /firmware 0771 system system
    mkdir /persist
    wait /dev/block/bootdevice/by-name/persist
    mount ext4 /dev/block/bootdevice/by-name/persist /persist nosuid nodev barrier=1
    
    chown root shell /tmp
    chmod 0775 /tmp

    write /proc/sys/kernel/panic_on_oops 1
    chown system log /log
    chmod 0770 /log
    write /proc/sys/vm/max_map_count 1000000

on fs
    mkdir /dev/usb-ffs 0770 shell shell
    mkdir /dev/usb-ffs/adb 0770 shell shell
    mount functionfs adb /dev/usb-ffs/adb uid=2000,gid=2000

    exec /sbin/e2fsck_s -y /dev/block/bootdevice/by-name/cache

    exec /sbin/e2fsck_s -y /dev/block/bootdevice/by-name/userdata
#remove the original usb config of qualcomn
 #   write /sys/class/android_usb/android0/enable 0
 #   write /sys/class/android_usb/android0/idVendor 18D1
 #   write /sys/class/android_usb/android0/idProduct D001
     write /sys/class/android_usb/android0/f_ffs/aliases adb
 #   write /sys/class/android_usb/android0/functions adb
 #   write /sys/class/android_usb/android0/iManufacturer ${ro.product.manufacturer}
 #   write /sys/class/android_usb/android0/iProduct ${ro.product.model}
 #   write /sys/class/android_usb/android0/iSerial ${ro.serialno}

on post-fs-data
    setprop vold.post_fs_data_done 1
on boot
    ifup lo
    hostname localhost
    domainname localdomain

    class_start default

# Load properties from /system/ + /factory after fs mount.
on load_all_props_action
    load_all_props
    usb_init_setting

# Indicate to fw loaders that the relevant mounts are up.
on firmware_mounts_complete
    rm /dev/.booting

on firmware_mounts_complete
   rm /dev/.booting

# Mount filesystems and start core system services.
on late-init
    trigger early-fs
    trigger fs
    trigger post-fs
    trigger post-fs-data

    # Load properties from /system/ + /factory after fs mount. Place
    # this in another action so that the load will be scheduled after the prior
    # issued fs triggers have completed.
    trigger load_all_props_action

    # Remove a file to wake up anything waiting for firmware
    trigger firmware_mounts_complete

    trigger early-boot
    trigger boot

on property:sys.powerctl=*
   powerctl ${sys.powerctl}

# Data Encryption start
on property:vold.decrypt=trigger_shutdown_framework
    class_reset server

on property:vold.decrypt=trigger_load_persist_props
    load_persist_props

on property:vold.decrypt=trigger_post_fs_data
    trigger post-fs-data
# Data Encryption end
service ueventd /sbin/ueventd
    critical
    seclabel u:r:ueventd:s0

service healthd /sbin/healthd -r
    critical
    seclabel u:r:healthd:s0

service test_diag /sbin/test_diag
    seclabel u:r:test_diag:s0
service recovery /sbin/recovery
    seclabel u:r:recovery:s0

service adbd /sbin/adbd --root_seclabel=u:r:su:s0 --device_banner=recovery
    disabled
    socket adbd stream 660 system system
    seclabel u:r:adbd:s0

# Always start adbd on userdebug and eng builds
#on property:ro.debuggable=1
#    write /sys/class/android_usb/android0/enable 1
#    start adbd

# Restart adbd so it can run as root
on property:service.adb.root=1
    write /sys/class/android_usb/android0/enable 0
    restart adbd
    write /sys/class/android_usb/android0/enable 1
# /* to process the usb port switch uevent */
service hw_scsi_switch /sbin/hw_scsi_switch
    seclabel u:r:hw_scsi_switch:s0

# /* USB google mode configuration */
on property:sys.usb.config=mass_storage
    stop adbd
    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 12d1
    write /sys/class/android_usb/android0/idProduct 1037
    write /sys/class/android_usb/android0/f_mass_storage/nluns 1
    write /sys/class/android_usb/android0/f_mass_storage/cdrom_index 0
    write /sys/class/android_usb/android0/functions ${sys.usb.config}
    write /sys/class/android_usb/android0/enable 1
    start adbd
    setprop sys.usb.state ${sys.usb.config}

# /*Disable the cpu(1-7) and stop charging*/
on property:factory_ftm_mode=1
#   write /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq 800000
    write /sys/devices/system/cpu/cpu1/online 0
    write /sys/devices/system/cpu/cpu2/online 0
    write /sys/devices/system/cpu/cpu3/online 0
    write /sys/devices/system/cpu/cpu4/online 0
    write /sys/devices/system/cpu/cpu5/online 0
    write /sys/devices/system/cpu/cpu6/online 0
    write /sys/devices/system/cpu/cpu7/online 0
    write /sys/class/power_supply/battery/factory_diag 0

# /* USB factory mode configuration */
on property:sys.usb.config=manufacture,adb
    stop adbd
    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 12d1
    write /sys/class/android_usb/android0/idProduct ${ro.hw.usb.pid.normal}
    write /sys/class/android_usb/android0/iSerial cleanup
    write /sys/class/android_usb/android0/f_diag/clients diag
    write /sys/class/android_usb/android0/f_serial/transports ${ro.hw.usb.serial.transport}
    write /sys/class/android_usb/android0/f_mass_storage/nluns 1
    write /sys/class/android_usb/android0/f_mass_storage/cdrom_index 0
    write /sys/class/android_usb/android0/functions serial,mass_storage,adb,diag
    write /sys/class/android_usb/android0/enable 1
    start adbd
    setprop sys.usb.state ${sys.usb.config}

# /* USB update mode configuration */
on property:sys.usb.config=update,serial,mass_storage,adb
    stop adbd
    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 12d1
    write /sys/class/android_usb/android0/idProduct ${ro.hw.usb.pid.normal}
    write /sys/class/android_usb/android0/iSerial cleanup
    write /sys/class/android_usb/android0/f_diag/clients diag
    write /sys/class/android_usb/android0/f_serial/transports smd,tty
    write /sys/class/android_usb/android0/f_mass_storage/nluns 1
    write /sys/class/android_usb/android0/f_mass_storage/cdrom_index 0
    write /sys/class/android_usb/android0/functions serial,mass_storage,adb,diag
    write /sys/class/android_usb/android0/enable 1
    start adbd
    setprop sys.usb.state ${sys.usb.config}

# /* USB update mode configuration without adb*/
on property:sys.usb.config=update,serial
    stop adbd
    write /sys/class/android_usb/android0/enable 0
    write /sys/class/android_usb/android0/idVendor 12d1
    write /sys/class/android_usb/android0/idProduct ${ro.hw.usb.pid.normal}
    write /sys/class/android_usb/android0/iSerial cleanup
    write /sys/class/android_usb/android0/f_diag/clients diag
    write /sys/class/android_usb/android0/f_serial/transports smd,tty
    write /sys/class/android_usb/android0/f_mass_storage/nluns 1
    write /sys/class/android_usb/android0/f_mass_storage/cdrom_index 0
    write /sys/class/android_usb/android0/functions serial
    write /sys/class/android_usb/android0/enable 1
    start adbd
    setprop sys.usb.state ${sys.usb.config}

service logd /system/bin/logd
   class core
   socket logd stream 0666 logd logd
   socket logdr seqpacket 0666 logd logd
   socket logdw dgram 0222 logd logd
   seclabel u:r:logd:s0

#start modem in recovery
service rmt_storage /sbin/rmt_storage
    user root
    disabled
    oneshot
service rmt_oeminfo /sbin/rmt_oeminfo
    seclabel u:r:oeminfo_domain:s0
    disabled
service libqmi_oem_main /sbin/libqmi_oem_main
    seclabel u:r:libqmi_oem_main:s0
    disabled
service recoverylog /system/bin/sh /etc/recoverylog.sh
    disabled
    oneshot
service wcnss-service /system/bin/wcnss_service
    disabled
    oneshot
service irsc_util /system/bin/logwrapper /system/bin/irsc_util "/etc/sec_config"
    class main
    user root
    disabled
    oneshot
    
on property:recovery.log=*
    start recoverylog

on property:androidboot.start_services=true
    mount vfat /dev/block/bootdevice/by-name/log  /log rw uid=1000,gid=1007,fmask=0007,dmask=0007
    wait /dev/block/bootdevice/by-name/system
    mount ext4 /dev/block/bootdevice/by-name/system /system -o ro
    mount ext4 /dev/block/bootdevice/by-name/cust /cust
    mount ext4 /dev/block/bootdevice/by-name/userdata /data -o rw
    mount ext4 /dev/block/bootdevice/by-name/cache /cache -o rw

    wait /dev/block/bootdevice/by-name/modem
    #mount vfat /dev/block/bootdevice/by-name/modem /firmware ro shortname=lower
    mount vfat /dev/block/bootdevice/by-name/modem /firmware ro context=u:object_r:firmware_file:s0,shortname=lower,uid=1000,gid=1000,dmask=227,fmask=337
    write /sys/kernel/boot_adsp/boot 1
    exec /system/bin/sh /system/etc/init.qcom.modem_links.sh
    load_all_props
    setprop recovery.load_finish true
setprop recovery.start_svice true
    setprop recovery.log on
    sys_wp_init_action
on property:recovery.start_svice=true
    start logd
    start rmt_storage
    start wcnss-service
    start test_diag
    start rmt_oeminfo
    start libqmi_oem_main
    start irsc_util
    start usb_update
    start hw_inotify
    
service huawei_version /sbin/huawei_version
    user root
    oneshot

service applogcat /system/bin/logcat -v threadtime -r2048 -z 10 -n 16 -f /data/log/android_logs/applogcat-log
    disabled
    seclabel u:r:hwlogcat:s0

service kmsglogcat /system/bin/kmsgcat -r 1024 -z 5 -n 8 -f /data/log/android_logs/kmsgcat-log
    disabled

# inotify /system
service hw_inotify /system/bin/inotifywait -rm -e modify -e attrib -e close_write -e moved_to -e moved_from -e move -e move_self -e create -e delete -e delete_self -o /log/inotify.log /system/app /system/lib /system/lib64 /system/framework
    class main
    user system
    group system
    oneshot
    disabled

#/* < DTS2015071501002 dongsheng 20150721 begin */
service vm_bms /system/bin/vm_bms
    user root
    group root
    disabled
#/* DTS2015071501002 dongsheng 20150721 end >*/

on property:config.qxdm_mdlogs=true
    start qxdm_mdlogs

on property:config.qxdm_mdlogs=false
    stop qxdm_mdlogs

# qxdm_mdlogs is triggered once startup or setprop used for save log in data partition
service qxdm_mdlogs /system/bin/faked_diag_mdlog -f /system/etc/DiagCfg/Diag.cfg -o /data/log/diag_mdlogs/ -n 10 -s 20 -x
    disabled
